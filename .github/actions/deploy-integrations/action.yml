name: Deploy Integrations
description: Deploys integrations

input:
  environment:
    type: choice
    description: 'Environment to deploy to'
    required: true
    options:
      - staging
      - production
  sentry_auth_token:
    description: 'Sentry auth token'
    required: true
  token_cloud_ops_account:
    description: 'Cloud Ops account token'
    required: true
  cloud_ops_workspace_id:
    description: 'Cloud Ops workspace id'
    required: true
  gmail_client_id:
    description: 'Gmail client id'
    required: true
  gmail_client_secret:
    description: 'Gmail client secret'
    required: true
  gmail_topic_name:
    description: 'Gmail topic name'
    required: true
  linear_client_id:
    description: 'Linear client id'
    required: true
  linear_client_secret:
    description: 'Linear client secret'
    required: true
  linear_webhook_signing_secret:
    description: 'Linear webhook signing secret'
    required: true
  slack_client_id:
    description: 'Slack client id'
    required: true
  slack_client_secret:
    description: 'Slack client secret'
    required: true

runs:
  using: 'composite'
  steps:
    - name: List Sentry Integrations
      id: list_sentry_integrations
      shell: bash
      run: |
        script_path="./.github/scripts/ls-sentry-integrations.sh"
        chmod +x $script_path
        filter=$($script_path)
        echo "::set-output name=filter::$filter"
    - name: Inject SourceMaps
      shell: bash
      run: pnpm -r --stream ${{ steps.list_sentry_integrations.outputs.filter }} exec sentry-cli sourcemaps inject .botpress/dist
    - name: Upload SourceMaps
      shell: bash
      run: pnpm -r --stream ${{ steps.list_sentry_integrations.outputs.filter }} exec sentry-cli sourcemaps upload --release=${{ github.sha }} --url-prefix '~' .botpress/dist
      env:
        SENTRY_AUTH_TOKEN: ${{ inputs.sentry_auth_token }}
        SENTRY_ORG: botpress-rm
        SENTRY_RELEASE: ${{ github.sha }}
    - name: Deploys Integrations
      env:
        ENVIRONMENT: ${{ inputs.environment }}
        TOKEN_CLOUD_OPS_ACCOUNT: ${{ inputs.token_cloud_ops_account }}
        CLOUD_OPS_WORKSPACE_ID: ${{ inputs.cloud_ops_workspace_id }}
        SENTRY_RELEASE: ${{ github.sha }}
        SENTRY_ENVIRONMENT: ${{ inputs.environment }}
      shell: bash
      run: |
        api_url="${{ inputs.environment == 'staging' && 'https://api.botpress.dev' || 'https://api.botpress.cloud' }}"

        # login

        echo "### Logging in to $api_url ###"
        pnpm bp login -y --api-url $api_url --workspaceId "$CLOUD_OPS_WORKSPACE_ID" --token "$TOKEN_CLOUD_OPS_ACCOUNT"

        # deploy

        integration_paths=$(pnpm list -F "@botpresshub/*" -F "!asana" -F "!trello" -F "!webchat" --json | jq -r "map(".path") | .[]")

        for integration_path in $integration_paths; do
            integration=$(basename $integration_path)
            exists=$(./.github/scripts/integration-exists.sh $integration)
            
            if [ $exists -eq 0 ]; then
                echo -e "\nDeploying integration: ### $integration ###\n"
                
                # TODO: deprecated features should only be allowed when bumping a patch or a minor version
                
                pnpm retry -n 2 -- pnpm -r --stream -F $integration -c exec -- 'bp deploy -v -y --noBuild --public --allowDeprecated'
            else
                echo -e "\nSkipping integration: ### $integration ###\n"
            fi
        done
